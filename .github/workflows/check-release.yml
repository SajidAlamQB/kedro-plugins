name: Check Versions and Build-Publish

on:
  push:
    branches:
      - main

jobs:
  check-version-and-build-publish:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: 3.8

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests build

    - name: Check versions and Build-Publish to PyPI
      run: |
        PACKAGE_PATHS=(
          "kedro-datasets/kedro_datasets"
          "kedro-telemetry/kedro_telemetry"
          "kedro-airflow/kedro_airflow"
          "kedro-docker/kedro_docker"
        )

        new_release=false
        for package_path in "${PACKAGE_PATHS[@]}"; do
          package_name="${package_path%%/*}"
          package_version=$(python -c "import re; print(re.search(r'__version__\s*=\s*\"([^\"]+)\"', open('$package_path/__init__.py').read()).group(1))")
          pypi_endpoint="https://pypi.org/pypi/$package_name/$package_version/json"
          status_code=$(curl --write-out %{http_code} --silent --output /dev/null "$pypi_endpoint")
          if [ "$status_code" -eq 404 ]; then
            echo "Starting the release of $package_name $package_version"
            cd $package_path/..
            python -m build
            new_release=true
            break
          else
            echo "Skipped: $package_name $package_version already exists on PyPI"
          fi
        done
        echo "::set-output name=new_release::$new_release"

    - name: Publish distribution to Test PyPI
      if: steps.build.outputs.new_release == 'true'
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.TEST_PYPI_API_TOKEN }}
        repository-url: https://test.pypi.org/legacy/
